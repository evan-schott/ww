// Code generated by capnpc-go. DO NOT EDIT.

package pubsub

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	channel "github.com/wetware/ww/internal/api/channel"
)

type Topic capnp.Client

// Topic_TypeID is the unique identifier for the type Topic.
const Topic_TypeID = 0x986ea9282f106bb0

func (c Topic) Publish(ctx context.Context, params func(Topic_publish_Params) error) (Topic_publish_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_publish_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Topic_publish_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Subscribe(ctx context.Context, params func(Topic_subscribe_Params) error) (Topic_subscribe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_subscribe_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Topic_subscribe_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Name(ctx context.Context, params func(Topic_name_Params) error) (Topic_name_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_name_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Topic_name_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Topic) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Topic) AddRef() Topic {
	return Topic(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Topic) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Topic) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Topic) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Topic) DecodeFromPtr(p capnp.Ptr) Topic {
	return Topic(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Topic) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Topic) IsSame(other Topic) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Topic) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Topic) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Topic_Server is a Topic with a local implementation.
type Topic_Server interface {
	Publish(context.Context, Topic_publish) error

	Subscribe(context.Context, Topic_subscribe) error

	Name(context.Context, Topic_name) error
}

// Topic_NewServer creates a new Server from an implementation of Topic_Server.
func Topic_NewServer(s Topic_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Topic_Methods(nil, s), s, c)
}

// Topic_ServerToClient creates a new Client from an implementation of Topic_Server.
// The caller is responsible for calling Release on the returned Client.
func Topic_ServerToClient(s Topic_Server) Topic {
	return Topic(capnp.NewClient(Topic_NewServer(s)))
}

// Topic_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Topic_Methods(methods []server.Method, s Topic_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Publish(ctx, Topic_publish{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subscribe(ctx, Topic_subscribe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Name(ctx, Topic_name{call})
		},
	})

	return methods
}

// Topic_publish holds the state for a server call to Topic.publish.
// See server.Call for documentation.
type Topic_publish struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_publish) Args() Topic_publish_Params {
	return Topic_publish_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_publish) AllocResults() (Topic_publish_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results(r), err
}

// Topic_subscribe holds the state for a server call to Topic.subscribe.
// See server.Call for documentation.
type Topic_subscribe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_subscribe) Args() Topic_subscribe_Params {
	return Topic_subscribe_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_subscribe) AllocResults() (Topic_subscribe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results(r), err
}

// Topic_name holds the state for a server call to Topic.name.
// See server.Call for documentation.
type Topic_name struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_name) Args() Topic_name_Params {
	return Topic_name_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_name) AllocResults() (Topic_name_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results(r), err
}

// Topic_List is a list of Topic.
type Topic_List = capnp.CapList[Topic]

// NewTopic creates a new list of Topic.
func NewTopic_List(s *capnp.Segment, sz int32) (Topic_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Topic](l), err
}

type Topic_publish_Params capnp.Struct

// Topic_publish_Params_TypeID is the unique identifier for the type Topic_publish_Params.
const Topic_publish_Params_TypeID = 0x8810938879cb8443

func NewTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params(st), err
}

func NewRootTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params(st), err
}

func ReadRootTopic_publish_Params(msg *capnp.Message) (Topic_publish_Params, error) {
	root, err := msg.Root()
	return Topic_publish_Params(root.Struct()), err
}

func (s Topic_publish_Params) String() string {
	str, _ := text.Marshal(0x8810938879cb8443, capnp.Struct(s))
	return str
}

func (s Topic_publish_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_publish_Params) DecodeFromPtr(p capnp.Ptr) Topic_publish_Params {
	return Topic_publish_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_publish_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_publish_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_publish_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_publish_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_publish_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Topic_publish_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_publish_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Topic_publish_Params_List is a list of Topic_publish_Params.
type Topic_publish_Params_List = capnp.StructList[Topic_publish_Params]

// NewTopic_publish_Params creates a new list of Topic_publish_Params.
func NewTopic_publish_Params_List(s *capnp.Segment, sz int32) (Topic_publish_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_publish_Params](l), err
}

// Topic_publish_Params_Future is a wrapper for a Topic_publish_Params promised by a client call.
type Topic_publish_Params_Future struct{ *capnp.Future }

func (f Topic_publish_Params_Future) Struct() (Topic_publish_Params, error) {
	p, err := f.Future.Ptr()
	return Topic_publish_Params(p.Struct()), err
}

type Topic_publish_Results capnp.Struct

// Topic_publish_Results_TypeID is the unique identifier for the type Topic_publish_Results.
const Topic_publish_Results_TypeID = 0x9d3775c65b79b54c

func NewTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results(st), err
}

func NewRootTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results(st), err
}

func ReadRootTopic_publish_Results(msg *capnp.Message) (Topic_publish_Results, error) {
	root, err := msg.Root()
	return Topic_publish_Results(root.Struct()), err
}

func (s Topic_publish_Results) String() string {
	str, _ := text.Marshal(0x9d3775c65b79b54c, capnp.Struct(s))
	return str
}

func (s Topic_publish_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_publish_Results) DecodeFromPtr(p capnp.Ptr) Topic_publish_Results {
	return Topic_publish_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_publish_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_publish_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_publish_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_publish_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Topic_publish_Results_List is a list of Topic_publish_Results.
type Topic_publish_Results_List = capnp.StructList[Topic_publish_Results]

// NewTopic_publish_Results creates a new list of Topic_publish_Results.
func NewTopic_publish_Results_List(s *capnp.Segment, sz int32) (Topic_publish_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_publish_Results](l), err
}

// Topic_publish_Results_Future is a wrapper for a Topic_publish_Results promised by a client call.
type Topic_publish_Results_Future struct{ *capnp.Future }

func (f Topic_publish_Results_Future) Struct() (Topic_publish_Results, error) {
	p, err := f.Future.Ptr()
	return Topic_publish_Results(p.Struct()), err
}

type Topic_subscribe_Params capnp.Struct

// Topic_subscribe_Params_TypeID is the unique identifier for the type Topic_subscribe_Params.
const Topic_subscribe_Params_TypeID = 0xc772c6756fef5ba8

func NewTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Topic_subscribe_Params(st), err
}

func NewRootTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Topic_subscribe_Params(st), err
}

func ReadRootTopic_subscribe_Params(msg *capnp.Message) (Topic_subscribe_Params, error) {
	root, err := msg.Root()
	return Topic_subscribe_Params(root.Struct()), err
}

func (s Topic_subscribe_Params) String() string {
	str, _ := text.Marshal(0xc772c6756fef5ba8, capnp.Struct(s))
	return str
}

func (s Topic_subscribe_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_subscribe_Params) DecodeFromPtr(p capnp.Ptr) Topic_subscribe_Params {
	return Topic_subscribe_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_subscribe_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_subscribe_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_subscribe_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_subscribe_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_subscribe_Params) Chan() channel.Sender {
	p, _ := capnp.Struct(s).Ptr(0)
	return channel.Sender(p.Interface().Client())
}

func (s Topic_subscribe_Params) HasChan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_subscribe_Params) SetChan(v channel.Sender) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Topic_subscribe_Params) Buf() uint16 {
	return capnp.Struct(s).Uint16(0) ^ 32
}

func (s Topic_subscribe_Params) SetBuf(v uint16) {
	capnp.Struct(s).SetUint16(0, v^32)
}

// Topic_subscribe_Params_List is a list of Topic_subscribe_Params.
type Topic_subscribe_Params_List = capnp.StructList[Topic_subscribe_Params]

// NewTopic_subscribe_Params creates a new list of Topic_subscribe_Params.
func NewTopic_subscribe_Params_List(s *capnp.Segment, sz int32) (Topic_subscribe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Topic_subscribe_Params](l), err
}

// Topic_subscribe_Params_Future is a wrapper for a Topic_subscribe_Params promised by a client call.
type Topic_subscribe_Params_Future struct{ *capnp.Future }

func (f Topic_subscribe_Params_Future) Struct() (Topic_subscribe_Params, error) {
	p, err := f.Future.Ptr()
	return Topic_subscribe_Params(p.Struct()), err
}
func (p Topic_subscribe_Params_Future) Chan() channel.Sender {
	return channel.Sender(p.Future.Field(0, nil).Client())
}

type Topic_subscribe_Results capnp.Struct

// Topic_subscribe_Results_TypeID is the unique identifier for the type Topic_subscribe_Results.
const Topic_subscribe_Results_TypeID = 0x8470369ac91fcc32

func NewTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results(st), err
}

func NewRootTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results(st), err
}

func ReadRootTopic_subscribe_Results(msg *capnp.Message) (Topic_subscribe_Results, error) {
	root, err := msg.Root()
	return Topic_subscribe_Results(root.Struct()), err
}

func (s Topic_subscribe_Results) String() string {
	str, _ := text.Marshal(0x8470369ac91fcc32, capnp.Struct(s))
	return str
}

func (s Topic_subscribe_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_subscribe_Results) DecodeFromPtr(p capnp.Ptr) Topic_subscribe_Results {
	return Topic_subscribe_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_subscribe_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_subscribe_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_subscribe_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_subscribe_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Topic_subscribe_Results_List is a list of Topic_subscribe_Results.
type Topic_subscribe_Results_List = capnp.StructList[Topic_subscribe_Results]

// NewTopic_subscribe_Results creates a new list of Topic_subscribe_Results.
func NewTopic_subscribe_Results_List(s *capnp.Segment, sz int32) (Topic_subscribe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_subscribe_Results](l), err
}

// Topic_subscribe_Results_Future is a wrapper for a Topic_subscribe_Results promised by a client call.
type Topic_subscribe_Results_Future struct{ *capnp.Future }

func (f Topic_subscribe_Results_Future) Struct() (Topic_subscribe_Results, error) {
	p, err := f.Future.Ptr()
	return Topic_subscribe_Results(p.Struct()), err
}

type Topic_name_Params capnp.Struct

// Topic_name_Params_TypeID is the unique identifier for the type Topic_name_Params.
const Topic_name_Params_TypeID = 0xf1fc6ff9f4d43e07

func NewTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params(st), err
}

func NewRootTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params(st), err
}

func ReadRootTopic_name_Params(msg *capnp.Message) (Topic_name_Params, error) {
	root, err := msg.Root()
	return Topic_name_Params(root.Struct()), err
}

func (s Topic_name_Params) String() string {
	str, _ := text.Marshal(0xf1fc6ff9f4d43e07, capnp.Struct(s))
	return str
}

func (s Topic_name_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_name_Params) DecodeFromPtr(p capnp.Ptr) Topic_name_Params {
	return Topic_name_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_name_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_name_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_name_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_name_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Topic_name_Params_List is a list of Topic_name_Params.
type Topic_name_Params_List = capnp.StructList[Topic_name_Params]

// NewTopic_name_Params creates a new list of Topic_name_Params.
func NewTopic_name_Params_List(s *capnp.Segment, sz int32) (Topic_name_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_name_Params](l), err
}

// Topic_name_Params_Future is a wrapper for a Topic_name_Params promised by a client call.
type Topic_name_Params_Future struct{ *capnp.Future }

func (f Topic_name_Params_Future) Struct() (Topic_name_Params, error) {
	p, err := f.Future.Ptr()
	return Topic_name_Params(p.Struct()), err
}

type Topic_name_Results capnp.Struct

// Topic_name_Results_TypeID is the unique identifier for the type Topic_name_Results.
const Topic_name_Results_TypeID = 0xd5765aab1c56263f

func NewTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results(st), err
}

func NewRootTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results(st), err
}

func ReadRootTopic_name_Results(msg *capnp.Message) (Topic_name_Results, error) {
	root, err := msg.Root()
	return Topic_name_Results(root.Struct()), err
}

func (s Topic_name_Results) String() string {
	str, _ := text.Marshal(0xd5765aab1c56263f, capnp.Struct(s))
	return str
}

func (s Topic_name_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_name_Results) DecodeFromPtr(p capnp.Ptr) Topic_name_Results {
	return Topic_name_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_name_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_name_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_name_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_name_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_name_Results) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Topic_name_Results) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_name_Results) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Topic_name_Results) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Topic_name_Results_List is a list of Topic_name_Results.
type Topic_name_Results_List = capnp.StructList[Topic_name_Results]

// NewTopic_name_Results creates a new list of Topic_name_Results.
func NewTopic_name_Results_List(s *capnp.Segment, sz int32) (Topic_name_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_name_Results](l), err
}

// Topic_name_Results_Future is a wrapper for a Topic_name_Results promised by a client call.
type Topic_name_Results_Future struct{ *capnp.Future }

func (f Topic_name_Results_Future) Struct() (Topic_name_Results, error) {
	p, err := f.Future.Ptr()
	return Topic_name_Results(p.Struct()), err
}

type Router capnp.Client

// Router_TypeID is the unique identifier for the type Router.
const Router_TypeID = 0xde50b3e61b766f3a

func (c Router) Join(ctx context.Context, params func(Router_join_Params) error) (Router_join_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xde50b3e61b766f3a,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Router",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Router_join_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Router_join_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Router) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Router) AddRef() Router {
	return Router(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Router) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Router) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Router) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Router) DecodeFromPtr(p capnp.Ptr) Router {
	return Router(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Router) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Router) IsSame(other Router) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Router) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Router) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Router_Server is a Router with a local implementation.
type Router_Server interface {
	Join(context.Context, Router_join) error
}

// Router_NewServer creates a new Server from an implementation of Router_Server.
func Router_NewServer(s Router_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Router_Methods(nil, s), s, c)
}

// Router_ServerToClient creates a new Client from an implementation of Router_Server.
// The caller is responsible for calling Release on the returned Client.
func Router_ServerToClient(s Router_Server) Router {
	return Router(capnp.NewClient(Router_NewServer(s)))
}

// Router_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Router_Methods(methods []server.Method, s Router_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xde50b3e61b766f3a,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Router",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, Router_join{call})
		},
	})

	return methods
}

// Router_join holds the state for a server call to Router.join.
// See server.Call for documentation.
type Router_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Router_join) Args() Router_join_Params {
	return Router_join_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Router_join) AllocResults() (Router_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Results(r), err
}

// Router_List is a list of Router.
type Router_List = capnp.CapList[Router]

// NewRouter creates a new list of Router.
func NewRouter_List(s *capnp.Segment, sz int32) (Router_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Router](l), err
}

type Router_join_Params capnp.Struct

// Router_join_Params_TypeID is the unique identifier for the type Router_join_Params.
const Router_join_Params_TypeID = 0xfb2fed6504f78754

func NewRouter_join_Params(s *capnp.Segment) (Router_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Params(st), err
}

func NewRootRouter_join_Params(s *capnp.Segment) (Router_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Params(st), err
}

func ReadRootRouter_join_Params(msg *capnp.Message) (Router_join_Params, error) {
	root, err := msg.Root()
	return Router_join_Params(root.Struct()), err
}

func (s Router_join_Params) String() string {
	str, _ := text.Marshal(0xfb2fed6504f78754, capnp.Struct(s))
	return str
}

func (s Router_join_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Router_join_Params) DecodeFromPtr(p capnp.Ptr) Router_join_Params {
	return Router_join_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Router_join_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Router_join_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Router_join_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Router_join_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Router_join_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Router_join_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Router_join_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Router_join_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Router_join_Params_List is a list of Router_join_Params.
type Router_join_Params_List = capnp.StructList[Router_join_Params]

// NewRouter_join_Params creates a new list of Router_join_Params.
func NewRouter_join_Params_List(s *capnp.Segment, sz int32) (Router_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Router_join_Params](l), err
}

// Router_join_Params_Future is a wrapper for a Router_join_Params promised by a client call.
type Router_join_Params_Future struct{ *capnp.Future }

func (f Router_join_Params_Future) Struct() (Router_join_Params, error) {
	p, err := f.Future.Ptr()
	return Router_join_Params(p.Struct()), err
}

type Router_join_Results capnp.Struct

// Router_join_Results_TypeID is the unique identifier for the type Router_join_Results.
const Router_join_Results_TypeID = 0xe8a6b1cad09d4625

func NewRouter_join_Results(s *capnp.Segment) (Router_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Results(st), err
}

func NewRootRouter_join_Results(s *capnp.Segment) (Router_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Results(st), err
}

func ReadRootRouter_join_Results(msg *capnp.Message) (Router_join_Results, error) {
	root, err := msg.Root()
	return Router_join_Results(root.Struct()), err
}

func (s Router_join_Results) String() string {
	str, _ := text.Marshal(0xe8a6b1cad09d4625, capnp.Struct(s))
	return str
}

func (s Router_join_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Router_join_Results) DecodeFromPtr(p capnp.Ptr) Router_join_Results {
	return Router_join_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Router_join_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Router_join_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Router_join_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Router_join_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Router_join_Results) Topic() Topic {
	p, _ := capnp.Struct(s).Ptr(0)
	return Topic(p.Interface().Client())
}

func (s Router_join_Results) HasTopic() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Router_join_Results) SetTopic(v Topic) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Router_join_Results_List is a list of Router_join_Results.
type Router_join_Results_List = capnp.StructList[Router_join_Results]

// NewRouter_join_Results creates a new list of Router_join_Results.
func NewRouter_join_Results_List(s *capnp.Segment, sz int32) (Router_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Router_join_Results](l), err
}

// Router_join_Results_Future is a wrapper for a Router_join_Results promised by a client call.
type Router_join_Results_Future struct{ *capnp.Future }

func (f Router_join_Results_Future) Struct() (Router_join_Results, error) {
	p, err := f.Future.Ptr()
	return Router_join_Results(p.Struct()), err
}
func (p Router_join_Results_Future) Topic() Topic {
	return Topic(p.Future.Field(0, nil).Client())
}

const schema_f9d8a0180405d9ed = "x\xda\x8c\x93Mh\x13A\x1c\xc5\xffof\xe2\x14i" +
	"H\xc7\x8d\xdfB\xa5\xb4\xa29\xb4\xb6\x82\x1f=\x98\xa0" +
	"\xa8\x17\x0f\xd9PD,\x82I\\m\xb4\xc9\x86l\xb6" +
	"RA\xbcT\xec]\x04-\x04TP\x14/V\xf1 " +
	"\xe2\xc1KK\xd5\x83\x07\x05{\xf1\xa6\x14!\x8a H" +
	"\xfd`e\x12w\x13m-^wf\xde\xff\xf7\xde\xfb" +
	"\xef\xd6\xfbH\x88\xdep\\\x123\x07B\xcb\xbc\xbe\x17" +
	"\xed3\x13\xdb\x8bc\xa4\x0c\x10\x09I\xb4\xed\x02\x8f\x81" +
	"\x84\xb7w\xec\xf9\xe8\xf8\xa5\xb6\xf1\xfaI\x08\xfa(\xcf" +
	"W\x80`\xb8<N\xf0\xee\x9dn\xeb\xd9|\xa7p\x85" +
	"T\x98{\xd5\xd9\x90Xs\xed\xcd<\x11\x8c\xcb|\xc2" +
	"\xa8pId\\\xe5\xd3\xc6J-\xea\x1d|8:8" +
	"\xe5\xee\xa84\xcd\xf9\xc9\xd7\xe99\xb7\x07?\xd9\xeeT" +
	"i\x9aL\x03\xc1\xa0w\xbcC\x0f\xaa\xf23\x04/\xbe" +
	"\xe9\xd0\x86\xbbGF^7\x93\x8c\x0a\xa6/\x9c\x13\x9a" +
	"\xa4\xdf\x1eY\xff\xfeA\xf2\xed\x02\x92\x8a\xb8a\xdc\xd4" +
	"\xc3\x8c\xeb\xe2\x801S#\xe9\xda_y\xf9l\xf2\xd6" +
	"\x1c\xa9h\xa06)\x96k\xb5G55\xb9\xfb\xd5\x97" +
	"y\xfb\xc7\xe7\x06\xaa1+\xbe\x91\xf0\x06.~\x15V" +
	"\xb5\xe7{\xf3\xcb'u\x8e\xa7\"Ng\xbd\xa2\x9bq" +
	"\xdcLw\x96\xa7\x8b\x85b\xff\x80]\xcce\xbb\x1d7" +
	"\xe3dK\xb9\x8c\xd5\x99\xb2\x9c\x88;\\v\x16\xbdV" +
	"t3\xc39g\xa83\x99.\xa5\xf3pL\xc1\x05\x91" +
	"\x00\x91\x0aw\x10\x99-\x1cf\x94A\xe6\x9d\x93\x08\x13" +
	"C\x98\x10\xc8\xc0\x97\xe1\xb9l\x120[y\x88(\xa8" +
	"\x0f~\xf2\xca\xdcCL\xed\x93@\x109\xfc\xf6\xd5\xae" +
	"\x141\xd5+\xc1\x02\xf7\xf0SW]1bj\xad<" +
	"\xff\x1b1\x01\xcf\xf7D\xb0\x12\x88\x14\xd2y+\x81$" +
	"\xb0\xa4\xb1\x94\xe5\xb8\xc3\xfc\x1f\xee\x1b!%\xd3%\x99" +
	"\xce;fK\xe0\x7fK\x8c\xc8\xec\xe40\x8f1\x00Q" +
	"\x00PGu&\x879\xcc\xe3\x0c\x91\xecP\xba\x00\xe5" +
	"}\\\xf5ag\xb4\xfax\x8e\x88\x12Ph7\x05C" +
	"\xf3G\x85\xd5\xa6\xd0\xaf\x93\x1c\xb5\x0c\x15Af\xdc\x13" +
	"\x90\xc4Br#-\x8e\xaf\xcd\xd5\xd9\xcb\x0e5\xb7\x12" +
	"k\xb4RK\x00\xad\xc4\xd0\xba\xa0\x96\x94\xed\xca\xb2U" +
	"\xd2\xbd\x88Z/\xfe\x12\xc1\xdfC\xa5t\xbe!\x199" +
	"e\xe7\x0a\x8b\xe5\x98\xb2\xdd\xb2U\xea\xd6\xc7\x01\xc9\x1f" +
	"(}\x0d\x94\xf6\xb2\xa6\x86j\xfc\x9c\x04m4\x90d" +
	"\x7f{\x8b\xd76\xceYbf\xfd\xc2\x7f\x99\xff\x15\x00" +
	"\x00\xff\xff\x9f14\x0d"

func init() {
	schemas.Register(schema_f9d8a0180405d9ed,
		0x8470369ac91fcc32,
		0x8810938879cb8443,
		0x986ea9282f106bb0,
		0x9d3775c65b79b54c,
		0xc772c6756fef5ba8,
		0xd5765aab1c56263f,
		0xde50b3e61b766f3a,
		0xe8a6b1cad09d4625,
		0xf1fc6ff9f4d43e07,
		0xfb2fed6504f78754)
}
