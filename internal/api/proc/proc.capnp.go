// Code generated by capnpc-go. DO NOT EDIT.

package proc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xe8bb307fa2f406fb

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0xaf67b0a40b1c2bea

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0xaf67b0a40b1c2bea, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Config() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Executor_exec_Params) HasConfig() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetConfig(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (f Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Params(p.Struct()), err
}
func (p Executor_exec_Params_Future) Config() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0x8d124035fd940437

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0x8d124035fd940437, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Proc() Waiter {
	p, _ := capnp.Struct(s).Ptr(0)
	return Waiter(p.Interface().Client())
}

func (s Executor_exec_Results) HasProc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProc(v Waiter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (f Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Results(p.Struct()), err
}
func (p Executor_exec_Results_Future) Proc() Waiter {
	return Waiter(p.Future.Field(0, nil).Client())
}

type Waiter capnp.Client

// Waiter_TypeID is the unique identifier for the type Waiter.
const Waiter_TypeID = 0xc66c9bda04b0f29e

func (c Waiter) Wait(ctx context.Context, params func(Waiter_wait_Params) error) (Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Waiter_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Waiter_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Waiter) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Waiter) AddRef() Waiter {
	return Waiter(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Waiter) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Waiter) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Waiter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Waiter) DecodeFromPtr(p capnp.Ptr) Waiter {
	return Waiter(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Waiter) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Waiter) IsSame(other Waiter) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Waiter) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Waiter) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Waiter_Server is a Waiter with a local implementation.
type Waiter_Server interface {
	Wait(context.Context, Waiter_wait) error
}

// Waiter_NewServer creates a new Server from an implementation of Waiter_Server.
func Waiter_NewServer(s Waiter_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Waiter_Methods(nil, s), s, c)
}

// Waiter_ServerToClient creates a new Client from an implementation of Waiter_Server.
// The caller is responsible for calling Release on the returned Client.
func Waiter_ServerToClient(s Waiter_Server) Waiter {
	return Waiter(capnp.NewClient(Waiter_NewServer(s)))
}

// Waiter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Waiter_Methods(methods []server.Method, s Waiter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Waiter_wait{call})
		},
	})

	return methods
}

// Waiter_wait holds the state for a server call to Waiter.wait.
// See server.Call for documentation.
type Waiter_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Waiter_wait) Args() Waiter_wait_Params {
	return Waiter_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Waiter_wait) AllocResults() (Waiter_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Waiter_wait_Results(r), err
}

// Waiter_List is a list of Waiter.
type Waiter_List = capnp.CapList[Waiter]

// NewWaiter creates a new list of Waiter.
func NewWaiter_List(s *capnp.Segment, sz int32) (Waiter_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Waiter](l), err
}

type Waiter_wait_Params capnp.Struct

// Waiter_wait_Params_TypeID is the unique identifier for the type Waiter_wait_Params.
const Waiter_wait_Params_TypeID = 0x99761c4abe038bf3

func NewWaiter_wait_Params(s *capnp.Segment) (Waiter_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Params(st), err
}

func NewRootWaiter_wait_Params(s *capnp.Segment) (Waiter_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Params(st), err
}

func ReadRootWaiter_wait_Params(msg *capnp.Message) (Waiter_wait_Params, error) {
	root, err := msg.Root()
	return Waiter_wait_Params(root.Struct()), err
}

func (s Waiter_wait_Params) String() string {
	str, _ := text.Marshal(0x99761c4abe038bf3, capnp.Struct(s))
	return str
}

func (s Waiter_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Waiter_wait_Params) DecodeFromPtr(p capnp.Ptr) Waiter_wait_Params {
	return Waiter_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Waiter_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Waiter_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Waiter_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Waiter_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Waiter_wait_Params_List is a list of Waiter_wait_Params.
type Waiter_wait_Params_List = capnp.StructList[Waiter_wait_Params]

// NewWaiter_wait_Params creates a new list of Waiter_wait_Params.
func NewWaiter_wait_Params_List(s *capnp.Segment, sz int32) (Waiter_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Waiter_wait_Params](l), err
}

// Waiter_wait_Params_Future is a wrapper for a Waiter_wait_Params promised by a client call.
type Waiter_wait_Params_Future struct{ *capnp.Future }

func (f Waiter_wait_Params_Future) Struct() (Waiter_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Waiter_wait_Params(p.Struct()), err
}

type Waiter_wait_Results capnp.Struct

// Waiter_wait_Results_TypeID is the unique identifier for the type Waiter_wait_Results.
const Waiter_wait_Results_TypeID = 0x957555c94e5b1064

func NewWaiter_wait_Results(s *capnp.Segment) (Waiter_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Waiter_wait_Results(st), err
}

func NewRootWaiter_wait_Results(s *capnp.Segment) (Waiter_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Waiter_wait_Results(st), err
}

func ReadRootWaiter_wait_Results(msg *capnp.Message) (Waiter_wait_Results, error) {
	root, err := msg.Root()
	return Waiter_wait_Results(root.Struct()), err
}

func (s Waiter_wait_Results) String() string {
	str, _ := text.Marshal(0x957555c94e5b1064, capnp.Struct(s))
	return str
}

func (s Waiter_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Waiter_wait_Results) DecodeFromPtr(p capnp.Ptr) Waiter_wait_Results {
	return Waiter_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Waiter_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Waiter_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Waiter_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Waiter_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Waiter_wait_Results) Result() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Waiter_wait_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Waiter_wait_Results) SetResult(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Waiter_wait_Results_List is a list of Waiter_wait_Results.
type Waiter_wait_Results_List = capnp.StructList[Waiter_wait_Results]

// NewWaiter_wait_Results creates a new list of Waiter_wait_Results.
func NewWaiter_wait_Results_List(s *capnp.Segment, sz int32) (Waiter_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Waiter_wait_Results](l), err
}

// Waiter_wait_Results_Future is a wrapper for a Waiter_wait_Results promised by a client call.
type Waiter_wait_Results_Future struct{ *capnp.Future }

func (f Waiter_wait_Results_Future) Struct() (Waiter_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Waiter_wait_Results(p.Struct()), err
}
func (p Waiter_wait_Results_Future) Result() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_d78885a0de56b292 = "x\xda|\x92\xb1k\x14Q\x10\xc6\xe7\x9b\xf76\x1b\x8c" +
	"\xe1\xee\xed\x0b\xa49I\x13A\x13r(\"\xc26{" +
	"\x87J\xc0Bv\x03ja\xb5\xack8H\xee\xce\xbd" +
	"=\x93TV\x82 6A\x0b\x11D\x83\x8d\x95\xc1V" +
	"\x10\xd2\x08\xfe\x05\x82\x85\xb5XF\x1b\x95cew\xb3" +
	"\x97=\x8d\xd7\xce\xbc\x99\xdf\xf7\xcd\xfb\xaa\x83\x86<;" +
	"\xbd!\x88\xbdS\xc6DrA>\x1e\x9coX\x8fH" +
	"\xcd\x80\xc8\x80Y\xc5\xb9\x978\x06\x82~\x0d\x87\x90\xdc" +
	"\xaa\xde\xbc\xfa\xf1Z\xff\x09)\xabx\xa0\x7f\xe2\x17A" +
	"\x0f\xb2\xfe\xf7\x87\xe2\xfd\x95\xda\xdd\xa7y_\xa6\xed\x13" +
	"\xbcO2\xf9\xb6X\x9bz\xb5\xbb\xfa\xa6\xbc\x19\xcc\xe9" +
	"f\x83\xd3\xc9\xe7\xfb\xbb\xf2\xf3\xb3\xb5\x0f\xa4\xa6D\xb2" +
	"\xfd\xf6\xfa\x97\x17\xf7\x1f|\"\xa2*\xf4I\xde\xd6K" +
	"l\x12\xe9\xd3\xbc\xac\xb7\xd8\xd4[\\I~O\xfc\xd8" +
	"\xb9w\xe6\xdd\xd7#\x06\xd6yG\xf7\xb3\x81;\xbc\xac" +
	"\xf7\xd8\xd4{<K\x8bI7\xea\x04\xf5\xc0\xef\x8av" +
	"\xd7\xbe\xbc\x19\x06\xfd\xb8\x13\xd5\xc3\xcd0\x98_\x09{" +
	"\xfd\xb5\xb8G\xe4I!\x89$\x88\xd4\xf4\x02\x917)" +
	"\xe0]bT\xd2Q\xa8C\x95D\x0d(\xccy\x92Q" +
	".*\xccz\x12\x00\\\x01X\x06p(\x93\x08\x8a0" +
	"\xd4\xc0\xed\xae}\xc3o\xc5aT\xdf\xf0[\xf1\xfc\x8a" +
	"\x93K(\x0b\xb0\x0f\x04\xcc0\x9c(k\xc3\xc2\x08\x0f" +
	"\xd6\x98\x95\xee\x9c\x1f\xf9\xeb\xbd1\xb6\xdd\xec\x01\xfd\x8f" +
	"\x19t\xda\xb7[\xab\x19\xb3l\xa3\xccD\xc1D\xe4\x02" +
	"\x9e\x14\x06\xd10\x05(\xe2\xa2\xd4\x02Q\xf38\x9a5" +
	"\xa8%\xb3\x92\xaa\xfb\xe7xH\xf1G\x15\x1bp\x81\xa6" +
	"\x84\x82\xed\xe4\xff4B\xcf\x1c\x99q\xa7\xc4/\xc2\x86" +
	"\"\xcf\x7f\xf1S\xef\x05jh\xac\xcc\x1f)\xe6\xfcI" +
	"(\xc3V\x86\xed\\\xcc\x8er\xa0\xe4O\x00\x00\x00\xff" +
	"\xffN\x82\xe5\xcd"

func init() {
	schemas.Register(schema_d78885a0de56b292,
		0x8d124035fd940437,
		0x957555c94e5b1064,
		0x99761c4abe038bf3,
		0xaf67b0a40b1c2bea,
		0xc66c9bda04b0f29e,
		0xe8bb307fa2f406fb)
}
